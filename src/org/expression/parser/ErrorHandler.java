package org.expression.parser;

import java.util.BitSet;
import org.antlr.v4.runtime.ANTLRErrorListener;
import org.antlr.v4.runtime.Parser;
import org.antlr.v4.runtime.RecognitionException;
import org.antlr.v4.runtime.Recognizer;
import org.antlr.v4.runtime.atn.ATNConfigSet;
import org.antlr.v4.runtime.dfa.DFA;

/**
 * Handles any syntax errors that occur in parsing the expression.
 * @author Jack Timblin
 */
public class ErrorHandler implements ANTLRErrorListener {
    
    /**
     * Reports a syntax error when it occurs.
     * @param rcgnzr the parser that received the error.
     * @param o the offending token in the input stream.
     * @param i the line number in the input where the error occurred.
     * @param i1 the character position within that line where the error occurred.
     * @param string the error message.
     * @param re the exception generated by the parser which resulted in us reporting the error
     * this will be null in the case that the parser was able to recover in line.
     */
    @Override
    public void syntaxError(Recognizer<?, ?> rcgnzr, Object o, int i, int i1, String string, RecognitionException re) {
        if(re != null) {
            throw re;
        }
        throw new RuntimeException(string + " on line " + i + ":" + i1);
    }
    
    @Override
    public void reportAmbiguity(Parser parser, DFA dfa, int i, int i1, boolean bln, BitSet bitset, ATNConfigSet atncs) {}
    @Override
    public void reportAttemptingFullContext(Parser parser, DFA dfa, int i, int i1, BitSet bitset, ATNConfigSet atncs) {}
    @Override
    public void reportContextSensitivity(Parser parser, DFA dfa, int i, int i1, int i2, ATNConfigSet atncs) {}
    
}
